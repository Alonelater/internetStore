今天我要按照网上的视频完整的做出一个电商项目 下面尽量将过程记录 以便后期的回顾 凡是遇到不明白的就应该解决
不要盲目的追求速度 多写注释


1.创建项目
    1.1  创建相应的目录 和以前一样  classes  lib   还有配置tomcat
    1.2  引入要用的jar包  导入了jar包后 创建项目的结构目录
    1.3  创建项目的结构目录 实现三层架构  store.web  store.service  store.dao  等等
    1.4  这些弄好了之后我们就要自己老师提供给我们的工具类  加深印象 不要直接用老师的 毕竟那是老师的 不是你的
         将写的工具类放在我们的utils下面  在抽取工具类的过程中 我们要注意的就是BaseServlet这个工具类的抽取
         因为这个工具类继承了HttpServlet重写了其中的service方法 并没有重写doPost或者doGet方法 是因为子类
         待会继承了该类 先去初始化 子类自己也没写初始化方法 就会一直往上找 直到找到父类的 初始化完成后 就要调用service
         但是自己也没有  这时候就要找到BaseServlet这个父类  刚好里面有service这个方法 所以就执行他的这个方法
         但是他这个方法就是通过反射得到你携带的方法名 然后调用你的方法
    1.5  弄完了那个之后就是导入jsp页面  现在我们就要先运行看看静态效果
2.开始代码的编写
    先要做准备工作  我们要明白 在任何界面的跳转  都应该让servlet来实现 而不是我们点了链接就直接跳转到那个jsp里面  而是通过servlet
    来转发的  这是一个约定俗成的概念 为了方便项目的管理  所以我们要遵守
    2.1   编写用户UserServlet  （但是配置文件还没写 待会儿在写）  还有dao层里面的UserDaoImp实现类和用户接口UserDao service层里面的UserServiceImp和UserService接口
          这些都写好后 我们就要创建实体类User 那个就要根据数据库里面的用户字段去写  因为后面肯定要封装信息 所以我们要将实体类的属性名和数据库保持一致 避免封装不进去
    2.2  做完实体类的设计后我们就要开始理清自己的逻辑  开始弄我们的准备工作  站在上帝的角度去看别人注册的时候 我们应该让程序怎么做  然后一步步按照我们的顺序又让客户有个良好的体验
    2.3  修改jsp文件夹下面的注册界面register的链接  将其经过servlet的registerUI方法处理后 然后将其结果的字符串通过BaseServlet转发  呈现相应的页面
    2.4  新增register里面的form表单里面的name属性  还有action和method的地址和方法


3.将用户信息插入到数据库  UserServlet  需要做什么事情
        UserServlet  里面有一个注册的函数userRegist
        接收表单参数
        调用业务层注册功能
        注册成功,向用户邮箱发送信息,跳转到提示页面
        注册失败,跳转到提示页面
        依次实现service,dao
        不管成功与否跳转到/jsp/info.jsp获取提示信息

   3.1  现在准备工作做完了 我们注册就是将jsp里面注册的用户提交的信息封装成一个User对象 然后传递给service 和dao层实现插入数据库  实现数据库的信息的插入
   3.2  获取注册表单信息
   3.3  现在我们已经分装好了信息 详见UserServlet里面的userRegist方法 里面有详细的思想过程描述
   3.4  首先观察数据库  我们发现前台页面的有些信息还不完全 比如没有手机号码等  那我们就要去register.jsp里面去添加手机号码的字段  没有用户的uid 激活码什么的 这些都需要我们手动设置
   3.5  改造注册界面  现在将其改造完成后接下来我们就要将其信息注入到我们的数据库里面了
   3.6  创建各个实现类 接口里面的方法
   3.7  实现了注册功能 顺利将其插入数据库后  发送邮件 通知用户  这个是看视频学的 不用太过描述

4.实现用户的激活 由于我们在邮件上面设置了路径 所以只要用户点击我们的激活地址就行了 也就是说我们不用做什么准备工作 只要编写后台代码 对用户点击了激活后需要做什么操作弄清楚就行了
        获取地址栏的参数
        在UserServlet里面创建active方法  将code码作为参数传入方法中 通过返回值判断是否存在该用户 如果存在不仅将页面跳转到login.jsp
        并且更改用户的状态吗  设置为1  表示已经激活  将激活码设置为空 防止用户二次激活成功
   4.1 获取参数  method=active code=aew65sg476s55dgh4165e
   4.2 创建激活方法  通过返回值的布尔值来判断是否激活成功 在调用的方法内部设置了dao帮我们返回一个User对象
       通过User对象设置用户的状态值 和将激活码置为空 这些都是数据库的增删查改工作 很简单的
   4.3 将结果存在session对象里面  跳转到login.jsp页面查看提示激活与否的提示信息

5.实现用户登录逻辑的实现
        将在UserServlet 里面实现登录页面表单数据的封装
        调用service 实现用户登录
        登录成功将信息保存到session里面实现页面的跳转到index.jsp里面 并将头部的状态改成 比如欢迎谁谁谁
        登录失败
        request 里面存入到失败的信息 将信息转发至info.jsp界面
    5.0 准备工作 将index里面的登录地址改变 将其让userServlet控制 在进行转发  设置login.jsp里面的form表单的action和method设置 并且
        设置相应input的name属性
    5.1 获取登录页面的参数 调用工具类里面的方法将其封装成User对象
    5.2 再创建一个User对象 这个对象用来接收查询到的存在这个账户的人的信息  这样我们将其存在我们的session域里面 只要这次回话没有结束
        只要这次回话没有结束 我们就能用这个session 的该对象展示很多操作  这是一个亮点 应该学会
    5.3 在userLogin这个方法里面我们写的逻辑是个很好的参考点 将各种提示的信息用异常的形式向上抛出 到最顶端的人来捕获
        捕获后就能知道下面的那一层出了问题 根据问题进行相应的处理  如果成功就将信息传到session里面  然后页面重定向到首页
        不成功将异常抛上来的页面的信息转发至login.jsp里面 并进行相应输出
    5.4 我们在成功后还要做的一件事就是进去主页面  那个头部就是欢迎xxx 然后登录按钮换成退出  如果没有登录 就显示登录 注册
        首先我们先通过el和jstl改造我们的index.jsp让他实现逻辑效果
6.实现用户退出
        这个最为简单  做准备工作  实现让session失效就行了 重定向到index.jsp页面就行了
    6.1 修改index.jsp页面的退出地址链接  让其通过userServlet控制进入loginOut方法
    6.2 重定向到首页
    6.3 返回值置为空  这样就不会转发了
7.抽取公共页面
        做到这里们会发现 我们很多页面都有头部和尾部 但是我们只改了一个index.jsp里面的连接 这样的话我们在其它页面点击登录注册的时候就不是
        通过userServlet进行控制的  所以 我们要将公共页面抽取出来 直接使用动态包含 不然代码量太大 要修改的地方太多了
        我们已经通听过<%@include file=""%>这个代码动态的将所有头部和尾部界面引入到了所有的jsp页面
8.  做到这里我们就差不多已经将用户的模块做的差不多了 剩下的就是注册界面的其他信息 比如确认密码的校验 用户名的校验等等
    自动登录 ajax校验用户名是否被注册过 等等问题 还需要我们再完善 现在我们先将index.jsp里面的分类信息给弄好来





二、主页面的分类信息展示模块
  1.准备工作
        创建项目的结构 首先我们需要一个分类的IndexServlet帮我们控制  就像用户的UserServlet
        重写覆盖里面的excute方法  配置web.xml 里面的IndexServlet的配置参数  修改web项目下的index.jsp里面的转发
        参数路径 注意不是jsp下面/index.jsp的转发路径  因为客户端默认访问web文件夹下面的客户端  所以我们将这个路径改成indexServlet
        创建CategoryServlet类  这个Category 是展示相应的模块信息的 （没有配置信息） 在service和dao里面创建相应的接口


  2.开始代码的编写
        调用业务层获取全部分类数据  这个数据肯定是用集合装的
        将全部分类信息放入request
        转发到真实的首页/jsp/index.jsp
  3.
     3.1 创建Category实体类  里面的属性名字要和数据库里面的字段的名字一样
     3.2 创建categoryService  下面里面有一个方法  得到数据库里面的所有的模块名字  返回值类型是一个List集合
     3.3 将返回的List集合存在request域里面 将其转发给jsp/index.jsp页面
     3.4 具体的实现都是数据库的基本操作  将查询的信息用工具类封装起来  在返回给上层  这些都很简单的 就不一一叙述了

  4. 好  做到这里是不是以为就结束了  这时候你会发现  只有你直接访问首页的时候才会有那个信息模块的分类信息  你点其他的地方
     没有任何信息 没错  你是将每个页面都使用java代码动态的包含进去了  但是我们在遍历模块的时候是使用了c:foreach标签的啊
     所以你在indexServlet 里面做了处理是的访问首页的时候调用excute方法 下面执行了从数据库得到分类信息将其存在集合里面的
     但是我们在登录也好 注册也好 并没有将获得底层传上来的集合保存下来并且存到request域里面 或者session里面 也许你会想 那我们就
     将所有的进行底层操作的数据再封装成一个方法  将其 放在所有的调用该页面显示的里面 你可以试试 可行是可行的 但是累死你
  5. 下面我们学习新知识
        因为我们是将所有的头部和尾部信息 通过代码的形式加载到各个需要的界面 所以我们也可以通过json的格式
        将底层获取上来的集合转化为json格式的数据 那样在客户端请求的时候 通过CategoryServlet 里面的findAllCats方法
        这个方法也会像上面一样去调用底层的数据库得到一个模块的集合 我们在这个方法里面将集合转化为json格式的数据
        我们要做的就是将这些json格式的数据发给我们的header.jsp 然后header.jsp只要通过jquery方法$.each将所有的json数据对象进行遍历
        然后设置浏览器接收数据的的格式就行了 将获取的信息通过标签的拼接就能依次追加进去相应的区域就行了
        原理讲了这么多 现在我们开始实现
    5.1  创建CategoryServlet类  并且配置其相关参数
         过程太过复杂 我已经在header里面写了详细过程就不一一叙述  只要跟着思想就能推演出来
         注意jar包的导入 有些jar包太老了 所以我们要重新找过jar包
         经过调试 确实是可行的  只要我里面包含了的是我的首页面 我就可以用该方法去拿到所有的分类模块
    5.2  程序写到这里  就是如果用户频繁点击头部里面的信息的时候就会产生性能问题 最好就是将他放在redis里面 但是我们没有这个
         所以也就略过了这个过程




三、完成了导航栏里面的各个模块在每个页面的显示问题之后  接下来我们就要处理我们的首页里面的商品展示 分为最新和最热商品


   1.1 准备工作 分析 我们又要创建项目结构目录了
       那就是product实体类 相应的业务层 dao实现数据的查询已经返回 创建两个方法 一个是findNews  一个是findHots  那就开始吧
       前路漫漫 革命还未成功 同志仍需努力 加油
       在将信息转发至index.jsp  里面不知道因为什么 一直报错 解决了很久没有搞定 后面拷贝了卢辉的代码才有哟用
   2.1 在indexServlet里面 我们将相应的数据封装进集合 在index.jsp里面用jstl里面的foreach标签搞定了热门商品和最新商品的加载
   3.1 整个项目写到这 很多思路都应该明确了 所以就不用写太多的注释
   4.1 当用户点击商品链接的时候  就将连接里面携带的方法和参数携带给那个方法 那个方法调用底层的连接数据库 得到的商品信息转发给product_info.jsp
       过程基本一样 如果不明白就跟着代码走就明白了



四、 分页查询
    完成到这里我们会发现  展示的最新商品和最热商品 在只有启动服务器的时候 这时候是访问excute这个方法 所以我们能看见最新最热 但是当我们
    点击了登录 退出 等访问其他按钮的时候 这时候并没有携带一个indexServlet过去 也没有传递方法名为excute或者方法名为空的参数过去 也就不能访问最新最热了
    现在我们先另外开一个项目就是用来模拟分页查询的 这个模拟分页查询会了 那做商品的分页查询也就简单了
    1.1  准备工作 由于我们要实现的分页查询 是用户在点击模块分类的时候 比如电脑产品  手机产品 等等这些的时候我们就叫下面的显示相应的分类信息
         现在我们先改造我们的header.jsp里面的模块里面的<a href="">链接信息 <a href='${pageContext.request.contextPath}/productServlet?method=findProductsByCidWithPage&num=1&cid="+obj.cid+"'>
         我们将其改造成这样待会儿我们就可以在servlet 里面通过参数名字获取相应的参数
    1.2  在productServlet里面编写我们的相应的逻辑代码  知道我们要做的事情
         获取cid num   num是整型的
         调用业务层的功能  以分页的形式将当前类别的下的信息
         返回pageModel对象  这个pageModel对象就是帮我们封装好了分页查询需要什么东西 我们将其存放在我们的domain实体里面 可以仔细看看
         将获取得pageModel对象里面的信息存放至request
    1.3  写到这里的时候 说起来简单 实现起来可不容易  一定要理清思路 从哪里到哪里 怎么运作的 只有明白了这些我们明白整个过程是怎么操作
         过程大概描述一下吧  上面我们说到先将header.jsp里面的各个模块的链接信息更改了 给成了携带了productServlet和cid num属性的字符串
         再仔细看我们的productServlet 通过请求服务器 服务器就会解析我们的信息达到productServlet 里面 执行相应的方法  所以我们这时候要明白BaseServlet
         是怎么工作的 到达productServlet 里面后 看逻辑代码  知道什么是PageModel 干什么用的   因为它就是一个实体类 只不过这个实体类是分页的实体类
         他会帮我们干很多事  他会将我们传进去的参数在进行相应计算得到我们分页所要的数据  比如当前页 共多少页 展示多少数据 共有多少记录等等信息
         其实就是个工具类  通过这个工具类就可以将我们的分页的那个页面展示出来  然后我们将通过sql语句找出来的数据封装起来 传到PageModel里面的一个集合里面
         这样我们将这个pageModel 就可以通过转发 转给product_list.jsp里面 这样pageFile.jsp这个描述了分页的样式的这张表就能从转发里面获取
         想要的信息 将其通过el表达式填充所需要的字段  而且转给product_list.jsp里面也要展示很多商品 那我们也可以通过标签库里面的标签去判断PageModel里面是
         否有数据  有的话就通过foreach循环得到信息 没有就提示 认真领悟 只是说了思路 看看能不能明白这个过程  代码已经实现了
    1.4  刚刚又排除bug排了一个小时 总算是把之前的点击登录 退出等等没有出现热门什么的问题给解决了 后面好药出现的问题接着解决
         真的是学无止境 犯错越多 就越能知道哪里不足 不怕犯错 就怕错了还不知道怎么解决 解决了都是进步 这些都是思想逻辑没有理好 才会犯这些问题
         点击登录退出没有热门和最新商品的出题的主要问题在哪里 我们在上面已经分析过了 所以们一定要重定向到web应用下面的首页 不能直接重定向到那个jsp里面的首页
         那样因为没有执行IndexServlet里面的excute方法 就拿不到最新最热 的数据 所以一定要注意!!!!!!!!!!!


五、购物车模块
        现在做到这里 我们就要开始实现购物车了  那我们在这里就要先将购物车的模型抽取出来 我们自己可以尝试着用面向对象的思想去抽取
        每一个栏目都是一个对象 我们的购物车就是由多个购物项组成的 然后加上一些其他的属性和方法就构成了我们的的购物车  而购物项更加简单 就是商品的信息 还有一些其他属性
        好 有了这些基本属性 下面我们开始抽取吧
        我们先抽取购物项
        现在我们根据购物车的图片将所有的购物车的模型抽取出来了  总共分为购物项和购物车 仔细看我写在类里面的cart和CartItem的思想就能明白怎么抽了 然后仔细分析购物车自带的方法
        用什么集合比较方便适合 最后通过比较map集合回避list集合好一点 因为我们将pid作为键 整个购物项作为值就比较好遍历 删除上面也很容易 删除键就是删除了值就很快了
        现在模型已经你抽取完毕  就是该做准备工作 完成我们的代码
    1.1 准备工作 我们先将用户登录进去 改造之前遗留的一个在product_list.jsp里面的一个bug  因为我们是在index.jsp里面将连接信息更改了 当我们点击模块后再点击具体的商品的时候并没有
        根据product_list.jsp里面的各个商品携带的信息去经过查询去转发到product_info.jsp页面  现在我们已经更改完毕 接下来完成添加购物车
        准备工作 改造美工界面 将product_info.jsp改造一下 变成我们要的方式

    1.2  写到这了我们已经实现了完成了加入购物车的模型 我们要明确几个点
         1)首先我们在前面描述的抽取模型接住了一部分的product对象 那我们就要在cart.jsp里面遍历循环的时候就要利用我们的product自带的属性
           我们要注意 我们通过标签库里面的foreach这个标签遍历的集合并不是一定要是什么属性 因为标签库就是按你写的名字去找有没有get什么的 所以一定要首字母小写  按照
           驼峰式的规则去写el表达式里面的参数  不然就可能找不到了
         2)我们要明白你登陆与否是跟你的session里面的cart这个属性有关的 换句话说 session是服务器行为 一个客户端就一个session  所以你往里面存值只是属性在变动
           你根据不同的条件拿到的属性不同值就会不一样 你、你只要客户端没变 session没有被销毁 服务器没有关闭 那么不管你有没有登录 你只要点击了购物车 你都是会转到你的
           CartServlet 里面去判断session有没有cart这个属性 有就用 没有就创建 就这么简单 所以根本不必纠结为什么没登录就能将购物车信息加载到已经登录的人里面 这两者根本跟你是否
           登录无关 因为你登录了没登录都是去找那个CartServlet 里面的addCartItemToCart里面去找session里面的cart属性
           这里我们要学习的点就是我们怎么通过js提交表单 其他的我们在前面都学过 唯一要注意的就是我们的el表达式里面的命名规范
         3)一定要知道我们抽取出来的购物车模型是怎么做出来的  这样我们在cart.jsp里面就能够按照思路实现添加购物车的各个属性了
         4)删除就比较简单了 就只要找到那个session  按照相应的方法就能删除了

    1.3  进行到这里 我们接下来就是将具体的代码通过上面的描述进行实现就行了 所有的代码都已经卸载了CartServlet里面 我们要做的就是熟悉每一步是怎么实现的
         可能在CartServlet里面得注释写的不是很详细 但是我们在后面的回顾还需要补充自己的思想 所以看懂就行了
    1.4  在这里我们强调一下表单的提交方式 我们在product_list.jsp里面是用javaScript提交的表单的 在cart.jsp里面点击清空购物车我们没有选择使用javascript提交表单 因为javascript代码总是走不进去
         所以我们还是用链接携带信息将其注入到servlet里面去实现各个操作  尤其尤其是要注意cart.jsp 里面的遍历的el表达式怎么写的 那个涉及到表与表的关系 要明白每个含有什么
         还要注意el表达式里面写的值就到社少了一个get 所以他会按照驼峰式命名法去找你里面的值 所有我们的变量名一定要写小写字母开头 自定义的方法名也要按照驼峰式命名法
         切记切记


六、 订单的实现
    1.1  首先订单模块是一个较为复杂的模块 里面涉及的表  列 和表与表之间的关系就有很多 我们要明白表与表之间有什么关系 这个表的某一列是参照那张表的什么字段设计的  说的明白点就是主外键的设置
         我们要明白里面有那些表  一个是订单表  一个是订单项表   还有些实体类  我门先来简单分析下表里面有哪些列
         1.1.1   设计表  为了不造成数据库的冗余  我们在实际设计的时候我们要尽量避免这个
            订单表    这个表里面里面有描述订单的oid  uid  orderTime total state name telephone address
             oid==>流水号 uid==》会员uid（其实就是用户会员uid） orderTime==》订单时间 total==>总金额
             state==》表示订单状态  共有四种状态 针对卖家和买家有不同的状态未支付 未发货 未签收 已签收
             为订单表中插入一行数据,描述本次交易,这行数据部分数据是通过程序赋予,部分数据来自购物车的,部分数据来自session中的用户
             在这里面的uid是从不同地方获取的 比如uid是从session里面获取的 oid里面的是UUIDUtils获取的
    1.2  订单项
         指的是订单里面的每一项  每一项里面都有一个商品的详细信息  订单项的itemId 什么商品名称pid  什么图片数量quantity等等 具体看我们抽取的模型

    1.3  抽取订单模型
         我们先设计一下订单的项目的结构目录 order实体类 orderServlet orderService orderServiceImp orderDao orderDaoImp
    1.4  现在我们开始编写代码 我们分为以下几个步骤完成以下保存订单 并且分析订单的这些类的设计好的地方在哪里
         1)确认用户登录状态  没有登录的话就跳转到提示界面
         2)创建订单 为订单赋值
         3)创建订单项  找到该订单下的所有的订单项 并且将订单项赋值 将其放在相应的订单下面
         4)调用业务层的功能  将订单保存
         5)清空购物车
         6)将订单放在request 里面转发至相应的order_info.jsp

    1.5  我们已经完成了订单的插入到指定的表中  并且将订单信息能够展示在订单详情页上面  在这里我们要明白订单项 订单 之间有什么联系 有什么区别
         详细信息看我写的orderServlet 和orderServletImp saveOrder这个实现方法  里面有详细的说明 还有事务的成功的提交和失败的回滚 一定要注意

    1.6  接下来我们要完成的是用户点击我的订单我们要实现将用户的所有订单信息都展示展示  不仅包括每个订单的编号 还有每个每个编号下面的若干个订单项
         我们要采用分页的方式展示我的订单信息
         1)准备工作 修改我的订单的链接 让他到orderServlet里面去处理相应的事情
    1.7  这里要强调的是这个项目写到目前为止  逻辑性最强的一个地方  也是最难理解的一个地方 一定要好好看
         Order 里面有哪些属性 最重要的就是里面有一个集合是放订单项的 而OrderItem里面不仅有商品Product这个类作为属性 还有Order这个类
         最终目的就是为了将订单和订单项关联起来  你想一下 如果我们将很多的订单项的设置成同一个oid那么是不是将这个订单项个订单关联起来了
         我们现在简单复述一下这个OrderServlet是怎么工作的

         当我们点击header.jsp的我的的订单的时候 我们就会通过BaseServlet里面的service方法通过反射找到其子类里面通过连接传来的方法名称
         于是我们就进入到了OrderServlet 里面的findMyOrdersWithPage方法里面 接下来就仔细看我写在代码里面的注释  写的很详细
    1.8  下面我们要写的是在我的订单里面点击去付款 将我们的当前指定的订单信息里面的订单项给转发到order_info.jsp 执行结算
         其实这个就是1.7的缩小版 我们要做如下步骤
         1) 准备工作  修改链接将order_list.jsp 里面的连接修改成我们要的链接
         2) 创建项目的结构
         3)将order信息存到request域中
         4)转发至order_info.jsp

七、支付的实现
    1.1 这个模块主要是为了真实的实现 我们的支付钱是真的会被扣除的
    1.2 准备工作  我们先将我们的链接给改了  由于美工帮我们设置了用javascript进行提交表单 我们只要创建一个表单名跟美工设置的一样的就行
        我们就将整个order_info.jsp包括起来  并且修改地址 电话 收货人姓名 还有隐藏的oid
    1.3 我们已经修改了表单提交的链接 就是在我们的orderServlet里面的payOrder方法里面 所以我们现在去写payOrder要干的事
        获取客户端传来的表单信息 姓名 电话 地址 oid
        更新数据库里面的订单里面的相关信息  将传来的信息更新进去数据库
        然后向支付接口发送参数
    1.4 接收支付接口传回来的参数 经过计算进行比对 如果数据正确就更新订单的支付状态
        并且将相关信息放入request域中 转发至jsp/info.jsp下面



八、过滤器
    对用户进行去权限拦截  首先我们所有的页面访问都应该放在登录后才能进行

-------------------------------------------------------------------------------------------
其实做到这 可以说很多东西我们都已经完成了  就下来就是最做后台了 因为之前做的所有的操作可以说都是前台的东西
不管是显示商品信息的分类 还是展示订单的信息 可以说这都是站在用户的角度去实现的 现在我们就要做好后台 那就是作为管理员去管理整个数据库
首先我们就得有一个后台界面



后台界面就在我们admin下面  admin下面有几个界面  还有相应的分类下面有很多页面
                           welcome.jsp
                           top.jsp
                           left.jsp
                           index.jsp
                           home.jsp
                           bottom.jsp
-------------------------------------------------------------------------------------------


商品分类模块
对于admin/category里面的增加 编辑就没什么说的了 都是修改链接 唯一的亮点就是重定向到resp.sendRedirect(req.getContextPath()+"/adminCategoryServlet?method=getAllCats");
去重新查询数据库里面的信息再展示出来


对于删除就要注意了
我们的商品这个表里面参照了分类信息的cid所以一下子是不可能删掉的 现在我们提供三种方式
1. 先删除掉所以你要删除的cid里面对应的商品 再删除category里面的cid
2. 将商品里面的表示你要删除的cid替换成其他商品cid或者设为空  再删除Category里面的cid
3. 因为我们数据时好不容易手机的 我们可以尝试将category再增加一个字段 就是状态值 这样我们的就不用删除数据 只要最后筛选一下 不要展示给用户状态为1的商品分类就行了（表示删除的）
    那么如果我们更新了category的数据是否删除的状态  还要同步更新数据库的product  将里面的我们新增的字段cid_status设为1  这样我们展示最新最热的时候我们要增加条件  还有商品分类分类展示在首页也要修改条件 再将首页的信息重新按照条件查

4.经过一段时间的修改我们通过事务的操作  已经将我们的删除和恢复下架的商品信息完成了仔细看我们的adminCategoryServlet就行了 接下来完成商品管理后台模块

----------------------------------------------------------------------------------------


我们已经完成了后端的商品管理 接下来就是将我们的订单模块给完成 这个简单的商品系统就已经完成了
<select name="cate">
     <c:forEach items="${allCats}" var="ac">
        <option value="${ac.cid}" <c:if test="${p.cid==ac.cid}">selected</c:if>>${ac.cname}</option>
     </c:forEach>
</select>